<?php

include_once('dlr_info.features.inc');


/**
 * Implementation of hook_context_links_alter().
 * 
 * Have only one context link button appear for dlr group nodes when the info tab is selected: Edit the node.
 * 
 * Have context links for all nodes which have dlr_nodes_context_links set
 */
function dlr_info_context_links_alter(&$links) {
  $path_query = explode("/", $_GET['q']);
  $path_query = $path_query[0];
  if (context_get('context', 'dlr_groups_context_links')) {
    // It is a group node
    $node = menu_get_object();
    /* @var $active_space spaces_og class */
    $active_space = spaces_get_space();
    $group_node = node_load($active_space->id);
    $links = array();
    // The context_links button appaear for info page and pages with $group_node in the url but not node edit
    if ($path_query === "info" ||
            ($group_node->nid == $node->nid && strpos($path_query, "node") !== FALSE &&
            strpos($path_query, "edit") === FALSE &&
            strpos($path_query, "grant") === FALSE)) {
      // Remove old links and insert Edit group context link for info page
      $item = menu_get_item('node/' . $active_space->id . '/edit');
      $node_type = node_get_types('name', $group_node);
      if ($item['access']) {
        $links['admin_groups'] = array('title' => t('@name bearbeiten', array('@name' => $node_type), 'de'), 'href' => $item['href']);
      }
    }
  }

  // Add blog context button for news
  if ($path_query === "Aktuelles") {
    // Edit group context link for info page
    $links = array();
    $item = menu_get_item('node/add/blog');
    $node_type = node_get_types('name', $group_node);
    if ($item['access']) {
      $links['event'] = array('title' => t('Blogeintrag hinzfügen', NULL, 'de'), 'href' => $item['href'], '#weight' => 1);
    }
  }
  // Add event context button for calendar
  if ($path_query === "calendar") {
    // Edit group context link for info page
    $links = array();
    $item = menu_get_item('node/add/event');
    $node_type = node_get_types('name', $group_node);
    if ($item['access']) {
      $links['event'] = array('title' => t('Termine hinzfügen', NULL, 'de'), 'href' => $item['href'], '#weight' => 1);
    }
  }

  if (context_get('context', 'dlr_nodes_context_links')) {
    $links = array();
    $node = menu_get_object();
    $item = menu_get_item('node/' . $node->nid . '/edit');
    //Need to set the following context links for the node types mentioned in the context.
    if ($item['access']) {
      $links['edit_node'] = array('title' => t('@name bearbeiten', array('@name' => node_get_types('name', $node)), 'de'), 'href' => $item['href'], '#weight' => 0);
    }
    //setting a grant context link
    if (nodeaccess_access('grant', $node)) {
      $item = menu_get_item('node/' . $node->nid . '/grant');
      $links['node_access'] = array('title' => t('Sichtbarkeitseinstellungen', array('@name' => node_get_types('name', $node)), 'de'), 'href' => $item['href'], '#weight' => 2);
    }

    if ($node->type == 'book') {
      $item = menu_get_item('node/' . $node->nid . '/edit');
      //Need to set the following context links for the node types mentioned in the context.
      if ($item['access'])
        $links['edit_node'] = array('title' => t('Seite bearbeiten', NULL, 'de'), 'href' => $item['href'], '#weight' => 0);
      $item = menu_get_item('node/add/book');
      if ($item['access'])
        $links['add_book'] = array('title' => t('Unterseite hinzfügen', NULL, 'de'), 'href' => $item['href'], '#weight' => 1);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function dlr_info_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'search_form':
    case 'search_theme_form':
    case 'atrium_search_form':
      unset($_REQUEST['destination']);
      $form['submit']['#submit'] = array('dlr_info_apachesolr_search_form_submit');
      break;
  }
}

/** 
 * Send the searches to apachesolr
 */
function dlr_info_apachesolr_search_form_submit(&$form, &$form_state) { 
  // Look for our search terms in the right place
  if ($form_state['values']['search']) { 
    $search = $form_state['values']['search'];
  }
  else { 
    $search = $form_state['values']['keys'];
  }

  // Add an appropriate filter if we were searching from within a group
  $current_space = spaces_get_space();
  if ($current_space && $current_space->type == 'og') { 
  //  $query = 'filters=im_og_gid:'. $current_space->id;
  }
  global $base_url;
  $form_state['redirect'] = array($base_url.'/search/apachesolr_search/'. $search, $query);
}

/** 
 * Modifying the theme registry for litecal_timeslot
 */
function dlr_info_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['litecal_timeslot'])) {
    $theme_registry['litecal_timeslot']['function'] = 'dlr_oa_litecal_timeslot';
  }
}

function dlr_oa_litecal_timeslot($timespan, $start, $date, $format, $quickadd = array()) {
  $add = '';
  $attr = array('style' => '');
  $link_attr = array('class' => 'label');

  // Position
  if ($start < $timespan->granularity - 1) {
    $attr['style'] .= ' left:'. number_format($start / $timespan->granularity * 100, 2) .'%;';
  }
  // We position last items differently since slots often use borders and need tight alignment.
  else {
    $attr['style'] .= ' right:0%;';
  }

  // Width
  $attr['style'] .= ' width:'. number_format(1 / $timespan->granularity * 100, 2) .'%';

  // Classes
  $attr['class'] = 'litecal-slot rows-'. count($timespan->built);

  // Add class for today's slot.
  static $today;
  $today = !isset($today) ? date_format_date(date_now(), 'custom', 'Y-m-d') : $today;
  if ($today == date_format_date($date, 'custom', 'Y-m-d')) {
    $attr['class'] .= ' litecal-slot-today';
  }

  // If this timeslot is outside of the timespan's real time range,
  // add a class so it can be displayed accordingly.
  if (!litecal_date_between($date, $timespan->real_from, $timespan->real_to)) {
    $attr['class'] .= ' litecal-slot-gutter';
  }

  $attr = drupal_attributes($attr);

  // Quickadd
  if (!empty($quickadd['type'])) {
    $type = str_replace('_', '-', $quickadd['type']);
    $item = menu_get_item("node/add/{$type}");
    if ($item && $item['access']) {
      $options = array('query' => "edit[{$quickadd['field']}][0][value][date]=". date_format_date($date, 'custom', 'd.m.Y') . 
        /*"&edit[{$quickadd['field']}][0][value][time]=" . date_format_date($date, 'custom', 'g:iA') .*/"&destination=" . $_GET['q']);
      $link_attr['href'] = url("node/add/{$type}", $options);
      $add = "<span class='add'>". t('+ Add') ."</span>";
    }
  }
  $link_attr = drupal_attributes($link_attr);

  $formatted = date_format_date($date, 'custom', $format);

  return "<div {$attr}>
    <a $link_attr>{$add}<span class='num'>{$formatted}</span></a>
  </div>";
}

/**
 * Implementation of hook_menu_alter().
 * 
 * Redirect logged in user to profile on user/register
 * 
 */
function dlr_info_menu_alter(&$items){
     $items['user/login']['access callback'] = 'myreg_register_access';
  
}


function myreg_register_access() {

  // in the original user module this function is 'user_register_access'
  // return user_is_anonymous() && variable_get('user_register', 1); 
  // i just simply removed the 'user_is_anonymous' call in the access check. so....

  return variable_get('user_register', 1);

}
